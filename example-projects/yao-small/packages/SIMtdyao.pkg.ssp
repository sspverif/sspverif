package SIMtdyao {
    params {
        w: Integer,
        d: Integer,
        p: Integer,
        m: Integer,
        n: Integer,
        encn: fn Bits(n),Bits(n),Bits(n) -> Bits(m),
        encm: fn Bits(n),Bits(m),Bits(n) -> Bits(p),
        zeron: Bits(n),
    }

    state {
        Ctilde: Table(Integer, Table(Integer, Table(Bits(p), Bool))),
        dinf: Table(Integer, Table(Bool, Bits(n))),
        S: Table(Integer, Table(Integer, Table(Bool, Bits(n)))),
    }

    import oracles {
        GETBIT(j: Integer) -> Bool,
    }


    oracle GBL(
        C: Table(Integer, Table(Integer, (Integer, Integer, Table((Bool, Bool), Bool))))
    ) -> Table(Integer, Table(Integer, Table(Bits(p), Bool))) {
        ZZ <- new Table(Integer, Table(Bool, Bits(n)));
        ZZZ <- new Table(Bool, Bits(n));
        layertilde <- new Table(Integer, Table(Bits(p), Bool));
        for i: 0 <= i <= d {
            assert (Ctilde[i] == None as Table(Integer, Table(Bits(p), Bool)));
            for j: 1 <= j <= w {
                r <-$ Bits(n);
                rr <-$ Bits(n);
                ZZZ[true] <- Some(r);
                ZZZ[false] <- Some(rr);
                ZZ[j] <- Some(ZZZ);
            }
            S[i] <- Some(ZZ);
        }
        for ii: 1 <= ii <= d {
            gtilde <- new Table(Bits(p), Bool);
            assert not (C[ii] == None as Table(Integer, (Integer, Integer, Table((Bool, Bool), Bool))));
            layer <- Unwrap(C[ii]);
            for jj: 1 <= jj <= w {
                gate <- Unwrap(layer[jj]);
                (l, r, op) <- parse gate;
                assert not (op[(true, true)] == None as Bool);
                assert not (op[(true, false)] == None as Bool);
                assert not (op[(false, true)] == None as Bool);
                assert not (op[(false, false)] == None as Bool);
                bl <- true;
                br <- true;
                k <- zeron;
                XX <- Unwrap(S[(ii - 1)]);
                ZZZ <- Unwrap(XX[l]);
                kleft <- Unwrap(ZZZ[bl]);
                ZZZ <- Unwrap(XX[r]);
                kright <- Unwrap(ZZZ[br]);
                rrr <-$ Bits(n);
                rrrr <-$ Bits(n);
                cin <- encn(kleft, k, rrr);
                c <- encm(kright, cin, rrrr);
                gtilde[c] <- Some(true);
                bl <- false;
                br <- true;
                k <- zeron;
                XX <- Unwrap(S[(ii - 1)]);
                ZZZ <- Unwrap(XX[l]);
                kleft <- Unwrap(ZZZ[bl]);
                ZZZ <- Unwrap(XX[r]);
                kright <- Unwrap(ZZZ[br]);
                rrr <-$ Bits(n);
                rrrr <-$ Bits(n);
                cin <- encn(kleft, k, rrr);
                c <- encm(kright, cin, rrrr);
                gtilde[c] <- Some(true);
                bl <- true;
                br <- false;
                k <- zeron;
                XX <- Unwrap(S[(ii - 1)]);
                ZZZ <- Unwrap(XX[l]);
                kleft <- Unwrap(ZZZ[bl]);
                ZZZ <- Unwrap(XX[r]);
                kright <- Unwrap(ZZZ[br]);
                rrr <-$ Bits(n);
                rrrr <-$ Bits(n);
                cin <- encn(kleft, k, rrr);
                c <- encm(kright, cin, rrrr);
                gtilde[c] <- Some(true);
                bl <- false;
                br <- false;
                YY <- Unwrap(S[ii]);
                XX <- Unwrap(S[(ii - 1)]);
                ZZZ <- Unwrap(YY[jj]);
                k <- Unwrap(ZZZ[false]);
                ZZZ <- Unwrap(XX[l]);
                kleft <- Unwrap(ZZZ[bl]);
                ZZZ <- Unwrap(XX[r]);
                kright <- Unwrap(ZZZ[br]);
                rrr <-$ Bits(n);
                rrrr <-$ Bits(n);
                cin <- encn(kleft, k, rrr);
                c <- encm(kright, cin, rrrr);
                gtilde[c] <- Some(true);
                layertilde[jj] <- Some(gtilde);
            }
            Ctilde[ii] <- Some(layertilde);
        }
        return Ctilde;
    }

    oracle GETDINF() -> Table(Integer, Table(Bool, Bits(n))) {
        T <- Unwrap(S[d]);
        temp <- new Table(Bool, Bits(n));
        temptemp <- new Table(Bool, Bits(n));
        for jj: 0 <= jj <= w {
            temp <- Unwrap(T[jj]);
            z <- invoke GETBIT(jj);
            temptemp[z] <- temp[false];
            temptemp[not z] <- temp[true];
            dinf[jj] <- Some(temptemp);
        }
        return dinf;
    }

    oracle GETAOUT(j: Integer) -> Bits(n) {
        TT <- Unwrap(S[0]);
        TTT <- Unwrap(TT[j]);
        k <- Unwrap(TTT[false]);
        return k;
    }
}
