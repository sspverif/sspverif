WHITESPACE = _{ " " | "\r" | "\n" | "\t" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }


kw_package = _{ "package" }
kw_params = _{ "params" }
kw_state = _{ "state" }
kw_import = _{ "import" }
kw_oracles = _{ "oracles" }
kw_oracle = _{ "oracle" }
kw_parse = _{ "parse" }
kw_types = _{ "types" }

kw_composition = _{ "composition" }
kw_const = _{ "const" }
kw_instance = _{ "instance" }
kw_compose = _{ "compose" }

kw_return = _{ "return" }
kw_assert = _{ "assert" }
kw_abort = _{ "abort" }
kw_invoke = _{ "invoke" }
kw_for = _{ "for" }

kw_true  = _{ "true" }
kw_false = _{ "false" }
kw_emptyset = _{ "emptyset" }

kw_theorem = _{ "theorem" }
kw_assumption = _{ "assumption" }
kw_assumptions = _{ "assumptions" }
kw_propositions = _{ "propositions" }
kw_reduction = _{ "reduction" }
kw_equivalence = _{ "equivalence" }
kw_conjecture = _{ "conjecture" }
kw_gamehops = _{ "gamehops" }
kw_map = _{ "map" }
kw_invariant = _{ "invariant" }
kw_lemmas = _{ "lemmas" }

theorem = { kw_theorem ~ identifier ~ "{" ~ theorem_spec_list ~ "}" }
theorem_spec_list = { const_decl* ~ instance_decl* ~ assumptions? ~ game_hops ~ propositions? }
  assumptions = { kw_assumptions ~ "{" ~ ( assumption_entry )* ~ "}" }
    assumption_entry = { identifier ~ ":" ~ identifier ~ "~" ~ identifier }

  propositions = { kw_propositions ~ "{" ~ ( proposition_entry )* ~ "}" }
    proposition_entry = { identifier ~ ":" ~ identifier ~ "~" ~ identifier }


  game_hops = { kw_gamehops ~ "{" ~ ( reduction | equivalence | conjecture )* ~ "}"}

    conjecture = { kw_conjecture ~ identifier ~ identifier }

    reduction = { kw_reduction ~ identifier ~ identifier ~ "{" ~ reduction_spec ~ "}"}
      reduction_spec = { assumption_spec ~ map_spec ~ map_spec }
        assumption_spec = { kw_assumption ~ identifier }
        map_spec = { kw_map ~ identifier ~ identifier ~ map_spec_block }
        map_spec_block = { "{" ~ ( identifier ~ ":" ~ identifier )* ~ "}" }

    equivalence = { kw_equivalence ~ identifier ~ identifier ~ "{" ~ equivalence_oracle ~ equivalence_oracle* ~ "}"}
      equivalence_oracle = { identifier ~ ":" ~ "{" ~ invariant_spec ~ lemmas_spec ~ "}"}
        invariant_spec  = {kw_invariant ~ ":" ~ (("[" ~ path ~ (","? ~ path)* ~ "]") | path)}
        lemmas_spec = {kw_lemmas ~ "{" ~ (lemma_line)* ~ "}"}
        lemma_line = {smt_identifier ~ ":" ~ "[" ~ ( smt_identifier  ~ ","?)* ~ "]"}

smt_identifier = @{ ( ASCII_ALPHA | "_" | "-" ) ~ ( ASCII_ALPHA | ASCII_DIGIT | "_" | "-" )* }
path = @{ ( ASCII_ALPHA | "/" | "_" | "-" | "." ) ~ ( ASCII_ALPHA | ASCII_DIGIT |  "/" | "_" | "-" | "." )* }

composition = { kw_composition ~ identifier ~ "{" ~ composition_spec_list ~ "}" }
composition_spec_list = { const_decl* ~ instance_decl* ~ game_for* ~ compose_decl* ~ game_for*}

game_for = { kw_for ~ identifier ~ ":" ~ expression ~ for_comp ~ identifier ~ for_comp ~ expression ~ "{" ~ game_for_spec_list ~ "}" }
game_for_spec_list = { game_for* ~ ( instance_decl+ | compose_decl_multi_inst )?}

const_decl = { kw_const ~ identifier ~ ":" ~ tipe ~ ";" }

instance_decl_multi_inst = { kw_instance ~ identifier ~ indices_expr ~ "=" ~ identifier ~ "{" ~ instance_assign_list? ~ "}"}
index_id_list = _{ identifier ~ ("," ~ identifier)* }
index_expr_list = _{ expression ~ ("," ~ expression)* }

instance_decl            = { kw_instance ~ identifier ~ (indices_expr)? ~ "=" ~ identifier ~ "{" ~ instance_assign_list? ~ "}"}
instance_assign_list = { ( instance_assign )* }
instance_assign = _{ params_def | types_def }



compose_decl            = { kw_compose ~ "{" ~ compose_assign_body_list? ~ "}" }
compose_decl_multi_inst = { kw_compose ~ "{" ~ compose_assign_body_list_multi_inst? ~ "}" }


compose_assign_body_list            = _{ (compose_assign_body ~  ","? )+ }
compose_assign_body_list_multi_inst = _{ (compose_assign_body_multi_inst ~ ","? )+ }

compose_assign_body             = { identifier ~ ":" ~ "{" ~ compose_assign_list? ~ "}" }
compose_assign_body_multi_inst  = { identifier ~ indices_ident? ~ ":" ~ "{" ~ compose_assign_list? ~ "}" }

compose_assign_list = { compose_assign ~ ( "," ~ compose_assign )* ~ ","? }

compose_assign      =  { compose_assign_modifier? ~ identifier ~ ":" ~ identifier }

compose_assign_modifier            = _{ compose_assign_modifier_with_index }
compose_assign_modifier_with_index =  { "with" ~ "index" ~ indices_expr}

indices_ident =  { "[" ~ index_id_list ~ "]" }
indices_expr  =  { "[" ~ index_expr_list ~ "]" }

package = { kw_package ~ identifier ~ "{" ~ package_spec_list ~ "}" }

package_spec_list = { package_spec* }

package_spec = _{
  types | params | state | import_oracles | oracle_def
}

// these are for package files
params = { kw_params ~ ("{" ~ decl_list ~ "}" | "{" ~ "}") }
decl_list = { decl_spec ~ ( "," ~ decl_spec )* ~ ","? }
decl_spec = { identifier ~ ":" ~ tipe  }

types = { kw_types ~ ("{" ~ types_list ~ "}" | "{" ~ "}") }
types_list = { type_userdefined ~ ( "," ~ type_userdefined )* ~ ","? }

// these are for composition files in instance blocks
params_def = { kw_params ~ ("{" ~ params_def_list ~ "}" | "{" ~ "}") }
params_def_list = { params_def_spec ~ ( "," ~ params_def_spec )* ~ ","? }
params_def_spec = { identifier ~ ":" ~ expression  }

types_def = { kw_types ~ ("{" ~ types_def_list ~ "}" | "{" ~ "}") }
types_def_list = { types_def_spec ~ ( "," ~ types_def_spec )* ~ ","? }
types_def_spec = { type_userdefined ~ ":" ~ tipe }

countspec = { identifier | num | "*" }

tipe = _{ type_integer | type_bool | type_string | type_bits | type_maybe | type_fn | type_tuple | type_table | type_list | type_empty | type_userdefined }
  type_integer = { "Integer" }
  type_bool = { "Bool" }
  type_string = { "String" }
  type_bits = { "Bits(" ~ countspec ~ ")" }
  type_maybe = { "Maybe(" ~ tipe ~ ")" }
  type_fn = { "fn" ~ fn_arglist ~ "->" ~ tipe }
    fn_arglist = { fn_arg_spec ~ ( "," ~ fn_arg_spec )* }
    fn_arg_spec = { tipe }
  type_tuple = { "(" ~ tipe ~ ( "," ~ tipe )* ~ ")"}
  type_empty = { "()" }
  type_list = { "List(" ~ tipe ~ ")"}
  type_table = { "Table(" ~ tipe ~ "," ~ tipe ~ ")" }
  type_userdefined = @{ ( ASCII_ALPHA | "_" ) ~ ( ASCII_ALPHA | ASCII_DIGIT | "_" )* }

state = { kw_state ~ "{" ~ decl_list? ~ "}"  }

import_oracles = {kw_import ~ kw_oracles ~ "{" ~ import_oracles_body ~ "}" }
import_oracles_body = { (import_oracles_for | import_oracles_oracle_sig ~ "," )* }
import_oracles_oracle_sig = { identifier ~ indices_expr? ~ "(" ~ oracle_maybe_arglist ~ ")" ~ ("->" ~ tipe)? }
import_oracles_for = { kw_for ~ identifier ~ ":" ~ expression ~ for_comp ~ identifier ~ for_comp ~ expression ~ "{" ~ import_oracles_body ~ "}" }

oracle_def = { kw_oracle ~ oracle_sig ~ "{" ~ code ~ "}" }
oracle_sig = { identifier ~ "(" ~ oracle_maybe_arglist ~ ")" ~ ("->" ~ tipe)? }
    oracle_maybe_arglist = { oracle_arglist? }
    oracle_arglist = { oracle_arg_spec ~ ( "," ~ oracle_arg_spec )* }
    oracle_arg_spec = { identifier ~ ":" ~ tipe }



identifier = @{ ( ASCII_ALPHA | "_" ) ~ ( ASCII_ALPHA | ASCII_DIGIT | "_" )* }
num = { ASCII_DIGIT+ }

literal_boolean = { kw_true | kw_false }
literal_integer = { num }
literal_emptyset = { kw_emptyset ~ "as" ~ tipe }

literal = _{ literal_boolean | literal_emptyset | literal_integer }


code = { (stmt )* }
stmt = _{ table_sample | table_assign | sample | parse | invocation | assign | return_stmt | assert | abort | ite | for_ }

ite = {"if" ~ expression ~ "{" ~ code ~ "}" ~ ( "else" ~ "{" ~ code ~ "}" )? }

sample = { identifier ~ "<-$" ~ tipe ~ ";" }
assign = { identifier ~ "<-" ~ expression ~ ";" }
invocation = { identifier ~ ( "[" ~ table_index ~ "]" )? ~ "<-" ~ kw_invoke ~ oracle_call ~ ";" }
parse = { parse_tuple ~ "<-" ~  kw_parse ~ expression ~ ";" }
  parse_tuple = { "(" ~ identifier ~ ("," ~ identifier )+ ~ ")" }
table_sample = { identifier ~ "[" ~ expression ~ "]" ~ "<-$" ~ tipe ~ ";" }
table_assign = { identifier ~ "[" ~ expression ~ "]" ~ "<-" ~ expression ~ ";" }
return_stmt = { kw_return ~ expression? ~ ";" }
assert = { kw_assert ~ expression ~ ";" }
abort = { kw_abort ~ ";" }
for_ = { kw_for ~ identifier ~ ":" ~ expression ~ for_comp ~ identifier ~ for_comp ~ expression ~ "{" ~ code ~ "}" }
for_comp = { ( "<=" | "<" ) }
table_index = { expression }

expression = _{ expr_list | expr_set | expr_none | expr_untyped_none | expr_some | expr_unwrap | expr_add | expr_sub | expr_mul | expr_div | expr_or | expr_and | expr_xor | expr_not | expr_tuple | expr_equals | expr_not_equals | expr_newtable | fn_call | table_access | literal | identifier }

expr_equals   = { "("  ~ expression ~ ("==" ~ expression)+ ~ ")" }
expr_not_equals = { "("  ~ expression ~ ("!=" ~ expression)+ ~ ")" }

expr_add   = { "("  ~ expression ~ "+" ~ expression ~ ")" }
expr_sub   = { "("  ~ expression ~ "-" ~ expression ~ ")" }
expr_mul   = { "("  ~ expression ~ "*" ~ expression ~ ")" }
expr_div   = { "("  ~ expression ~ "/" ~ expression ~ ")" }

expr_and   = { "("  ~ expression ~ ("and" ~ expression)+ ~ ")" }
expr_or    = { "("  ~ expression ~ ("or"  ~ expression)+ ~ ")" }
expr_xor   = { "("  ~ expression ~ ("xor" ~ expression)+ ~ ")" }
expr_not   = { "not" ~ expression }

expr_newtable = { "new" ~ "Table" ~ "(" ~ tipe ~ "," ~ tipe ~ ")" }

oracle_call =  { identifier ~ oracle_call_index? ~ "(" ~ fn_call_arglist? ~ ")" }
oracle_call_index = { "[" ~ expression ~ "]" }
oracle_call_arglist = { expression ~ ( "," ~ expression)* }

fn_call =  { identifier ~ "(" ~ fn_call_arglist? ~ ")" }
fn_call_arglist = { expression ~ ( "," ~ expression)* }

expr_untyped_none = { "None" }
expr_none = { "None" ~ "as" ~ tipe }
expr_some = { "Some" ~ "(" ~ expression ~ ")" }
expr_unwrap = { "Unwrap" ~ "(" ~ expression ~ ")" }

table_access = { identifier ~ "[" ~ expression ~             "]" }
expr_tuple   = {        "(" ~ expression ~ ("," ~ expression)* ~ ")" }
// TODO: in the future we might want to allow empty lists and sets,
//     but that complicates type inference. We could probably do
//     what we also do with None, i.e. `List() of Integer` or `Set() of Bool`
expr_list  = { "List"   ~ "(" ~ expression ~ ("," ~ expression)* ~ ")" }
expr_set   = { "Set"    ~ "(" ~ expression ~ ("," ~ expression)* ~ ")" }
